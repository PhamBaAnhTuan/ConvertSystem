import email
import base64
import os
import pypandoc
from bs4 import BeautifulSoup
import uuid
import shutil
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from PIL import Image
import io # C·∫ßn import th∆∞ vi·ªán io

# --- C√°c h√†m get_katex_html v√† katex_to_image gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc ---

def get_katex_html(latex_string):
    """T·∫°o m·ªôt file HTML ƒë·∫ßy ƒë·ªß ƒë·ªÉ render m·ªôt c√¥ng th·ª©c KaTeX."""
    # Th√™m k√Ω t·ª± $$ ƒë·ªÉ KaTeX hi·ªÉu l√† ch·∫ø ƒë·ªô hi·ªÉn th·ªã (display mode)
    # ƒêi·ªÅu n√†y gi√∫p c√¥ng th·ª©c l·ªõn v√† r√µ r√†ng h∆°n trong ·∫£nh
    display_latex = f"$${latex_string}$$"
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css">
        <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"></script>
        <style>
            body {{ margin: 0; padding: 5px; display: inline-block; background-color: white; }}
        </style>
    </head>
    <body>
        <span id="formula">{display_latex}</span>
        <script>
            document.addEventListener("DOMContentLoaded", function() {{
                katex.render(document.getElementById('formula').textContent, document.getElementById('formula'), {{
                    throwOnError: false,
                    displayMode: true
                }});
            }});
        </script>
    </body>
    </html>
    """

def katex_to_image(latex_string, output_path, temp_dir):
    """Render m·ªôt chu·ªói LaTeX th√†nh h√¨nh ·∫£nh s·ª≠ d·ª•ng Selenium v√† KaTeX."""
    html_content = get_katex_html(latex_string)
    # S·ª≠ d·ª•ng m·ªôt t√™n file html t·∫°m th·ªùi duy nh·∫•t ƒë·ªÉ tr√°nh xung ƒë·ªôt
    temp_html_path = os.path.join(temp_dir, f'temp_formula_{uuid.uuid4()}.html')

    with open(temp_html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)

    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    # Th√™m c√°c t√πy ch·ªçn ƒë·ªÉ ƒë·∫£m b·∫£o tr√¨nh duy·ªát ch·∫°y ·ªïn ƒë·ªãnh
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("window-size=1200,800")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    
    try:
        driver.get(f'file://{os.path.abspath(temp_html_path)}')
        # C√≥ th·ªÉ c·∫ßn tƒÉng th·ªùi gian ch·ªù n·∫øu c√¥ng th·ª©c ph·ª©c t·∫°p
        time.sleep(1.5) 
        
        # Ch·ª•p ·∫£nh ph·∫ßn t·ª≠ ch·ª©a c√¥ng th·ª©c ƒë√£ render
        element = driver.find_element(By.CLASS_NAME, 'katex-html')
        
        # Ch·ª•p ·∫£nh m√†n h√¨nh c·ªßa ri√™ng element ƒë√≥
        png = element.screenshot_as_png
        
        im = Image.open(io.BytesIO(png))
        im.save(output_path)
        
    finally:
        driver.quit()
        # X√≥a file html t·∫°m sau khi d√πng xong
        if os.path.exists(temp_html_path):
            os.remove(temp_html_path)

def convert_mhtml_to_docx_universal(mhtml_file_path, docx_file_path):
    """
    Chuy·ªÉn ƒë·ªïi file MHTML sang DOCX, x·ª≠ l√Ω KaTeX b·∫±ng c√°ch chuy·ªÉn th√†nh h√¨nh ·∫£nh.
    """
    print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {mhtml_file_path}")
    
    temp_resource_dir = "temp_resources_" + str(uuid.uuid4())
    os.makedirs(temp_resource_dir, exist_ok=True)
    
    try:
        # ƒê·ªçc file d∆∞·ªõi d·∫°ng nh·ªã ph√¢n ƒë·ªÉ tr√°nh l·ªói encoding
        with open(mhtml_file_path, 'rb') as f:
            msg = email.message_from_binary_file(f)

        html_part = None
        for part in msg.walk():
            if part.get_content_type() == 'text/html':
                html_part = part
                break

        if not html_part:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn HTML trong file MHTML.")
            return

        html_content = html_part.get_payload(decode=True).decode(
            html_part.get_content_charset() or 'utf-8', 'ignore'
        )
        soup = BeautifulSoup(html_content, 'html.parser')

        print("üîç ƒêang t√¨m v√† chuy·ªÉn ƒë·ªïi c√°c c√¥ng th·ª©c KaTeX...")
        
        # --- THAY ƒê·ªîI QUAN TR·ªåNG ---
        # T√¨m t·∫•t c·∫£ c√°c th·∫ª 'span' c√≥ class l√† 'katex' ho·∫∑c 'katex-display'
        katex_elements = soup.find_all('span', class_=['katex', 'katex-display'])
        
        if not katex_elements:
            print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c KaTeX n√†o.")
        
        for i, element in enumerate(katex_elements):
            # Tr√°nh x·ª≠ l√Ω c√°c th·∫ª l·ªìng nhau
            if element.find_parent(class_=['katex', 'katex-display']):
                continue

            latex_source = element.find('annotation', encoding='application/x-tex')
            if latex_source:
                latex_string = latex_source.get_text()
                # T·∫°o t√™n file ·∫£nh duy nh·∫•t
                img_name = f'formula_{uuid.uuid4()}.png'
                img_path = os.path.join(temp_resource_dir, img_name)
                
                print(f"  - ‚öôÔ∏è ƒêang render c√¥ng th·ª©c {i+1}/{len(katex_elements)}...")
                try:
                    katex_to_image(latex_string, img_path, temp_resource_dir)
                    
                    if os.path.exists(img_path):
                        # Thay th·∫ø th·∫ª span b·∫±ng th·∫ª img
                        # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·ªÉ pandoc c√≥ th·ªÉ t√¨m th·∫•y file
                        img_tag = soup.new_tag('img', src=os.path.abspath(img_path), style="vertical-align: middle;")
                        element.replace_with(img_tag)
                        print(f"    ‚úÖ ƒê√£ chuy·ªÉn c√¥ng th·ª©c th√†nh ·∫£nh: {img_name}")
                    else:
                        print(f"    ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file ·∫£nh cho c√¥ng th·ª©c.")

                except Exception as e:
                    print(f"    ‚ùå L·ªói khi render c√¥ng th·ª©c: {latex_string[:30]}... | L·ªói: {e}")

        modified_html_path = os.path.join(temp_resource_dir, 'modified.html')
        with open(modified_html_path, 'w', encoding='utf-8') as f:
            f.write(str(soup))
        
        print("üîÑ ƒêang chuy·ªÉn ƒë·ªïi HTML sang DOCX v·ªõi Pandoc...")
        output = pypandoc.convert_file(
            modified_html_path,
            'docx',
            format='html',
            outputfile=docx_file_path,
            extra_args=['--standalone', '--reference-doc=reference.docx']
        )

        if output == "":
            print(f"üéâ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng! File DOCX ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {docx_file_path}")
        else:
            print("‚ùóÔ∏è C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi Pandoc.")

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
        if os.path.exists(temp_resource_dir):
            shutil.rmtree(temp_resource_dir)
            print(f"üóëÔ∏è ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m: {temp_resource_dir}")

# --- C√°ch s·ª≠ d·ª•ng ---
if __name__ == '__main__':
    # ƒê·∫£m b·∫£o file MHTML/TXT n·∫±m c√πng th∆∞ m·ª•c ho·∫∑c cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
    mhtml_file = 'document/ComputerVision/Th·ªã gi√°c m√°y t√≠nh.mhtml'
    docx_file = 'document/ComputerVision/Th·ªã gi√°c m√°y t√≠nh_output2.docx'

    if os.path.exists(mhtml_file):
        # T·∫°o m·ªôt file reference.docx tr·ªëng ƒë·ªÉ Pandoc s·ª≠ d·ª•ng (t√πy ch·ªçn nh∆∞ng n√™n c√≥)
        if not os.path.exists('reference.docx'):
            print("T·∫°o file reference.docx m·∫∑c ƒë·ªãnh...")
            os.system('pandoc -o reference.docx --print-default-data-file reference.docx')
            
        convert_mhtml_to_docx_universal(mhtml_file, docx_file)
    else:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file '{mhtml_file}'. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")

