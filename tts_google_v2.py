import os
import re
import threading
import customtkinter as ctk
from tkinter import filedialog, messagebox
from gtts import gTTS


class TextToSpeechToolV2(ctk.CTkFrame):
    """Component: Chuy·ªÉn file TXT th√†nh nhi·ªÅu file audio (TTS t·ª´ng Slide)"""

    def __init__(self, master=None):
        super().__init__(master)
        self.pack(fill="both", expand=True, padx=20, pady=20)

        # --- Bi·∫øn ---
        self.txt_path = ctk.StringVar()
        self.output_dir = ctk.StringVar()
        self.lang = ctk.StringVar(value="vi")
        self.speed = ctk.DoubleVar(value=1.0)
        self.status = ctk.StringVar(value="Ch∆∞a th·ª±c hi·ªán...")

        # --- UI ch√≠nh ---
        ctk.CTkLabel(
            self, text="üó£Ô∏è Text to Speech (Multi-Slide)", font=("Arial", 18, "bold")
        ).pack(pady=10)

        # --- Ch·ªçn file txt ---
        frm1 = ctk.CTkFrame(self)
        frm1.pack(fill="x", pady=10)
        ctk.CTkLabel(frm1, text="File TXT:").pack(side="left", padx=10)
        ctk.CTkEntry(
            frm1, textvariable=self.txt_path, placeholder_text="Ch·ªçn file .txt..."
        ).pack(side="left", padx=5, fill="x", expand=True)
        ctk.CTkButton(frm1, text="üìÇ Browse", command=self.select_txt).pack(
            side="right", padx=10
        )

        # --- Ch·ªçn th∆∞ m·ª•c output ---
        frm2 = ctk.CTkFrame(self)
        frm2.pack(fill="x", pady=10)
        ctk.CTkLabel(frm2, text="Th∆∞ m·ª•c Output:").pack(side="left", padx=10)
        ctk.CTkEntry(
            frm2,
            textvariable=self.output_dir,
            placeholder_text="Ch·ªçn ho·∫∑c t·∫°o th∆∞ m·ª•c audio...",
        ).pack(side="left", padx=5, fill="x", expand=True)
        ctk.CTkButton(frm2, text="üìÇ Browse", command=self.select_output).pack(
            side="right", padx=10
        )

        # --- Ch·ªçn ng√¥n ng·ªØ ---
        frm3 = ctk.CTkFrame(self)
        frm3.pack(fill="x", pady=10)
        ctk.CTkLabel(frm3, text="Ng√¥n ng·ªØ ƒë·ªçc:").pack(side="left", padx=10)
        ctk.CTkOptionMenu(
            frm3,
            values=["vi", "en", "fr", "ja", "zh-cn"],
            variable=self.lang,
        ).pack(side="left", padx=5)

        # --- Thanh tr∆∞·ª£t t·ªëc ƒë·ªô ---
        speed_frame = ctk.CTkFrame(self)
        speed_frame.pack(pady=10)
        ctk.CTkLabel(speed_frame, text="üéöÔ∏è T·ªëc ƒë·ªô n√≥i:").grid(row=0, column=0, padx=10)
        self.speed_slider = ctk.CTkSlider(
            speed_frame, from_=0.5, to=2.0, number_of_steps=15, variable=self.speed
        )
        self.speed_slider.grid(row=0, column=1, padx=10)
        self.speed_label = ctk.CTkLabel(speed_frame, text="1.0x")
        self.speed_label.grid(row=0, column=2)
        self.speed_slider.configure(
            command=lambda v: self.speed_label.configure(text=f"{float(v):.1f}x")
        )

        # --- Log box ---
        self.log_box = ctk.CTkTextbox(self, height=150)
        self.log_box.pack(fill="both", expand=True, pady=10)

        # --- N√∫t th·ª±c thi ---
        ctk.CTkButton(
            self, text="‚ñ∂Ô∏è Chuy·ªÉn TXT ‚Üí Audio Slides", command=self.run_tts
        ).pack(pady=10)
        ctk.CTkLabel(self, textvariable=self.status, text_color="gray").pack(pady=5)

    # ==============================
    # üóÇÔ∏è Ch·ªçn file v√† th∆∞ m·ª•c
    # ==============================
    def select_txt(self):
        path = filedialog.askopenfilename(
            title="Ch·ªçn file TXT", filetypes=[("Text Files", "*.txt")]
        )
        if path:
            self.txt_path.set(path)

    def select_output(self):
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c Output")
        if folder:
            self.output_dir.set(folder)

    # ==============================
    # ‚ñ∂Ô∏è Ch·∫°y TTS
    # ==============================
    def run_tts(self):
        txt_path = self.txt_path.get()
        if not os.path.isfile(txt_path):
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file TXT h·ª£p l·ªá.")
            return

        out_dir = self.output_dir.get() or os.path.join(
            os.path.dirname(txt_path), "audio"
        )
        if not os.path.exists(out_dir):
            os.makedirs(out_dir)

        threading.Thread(
            target=self._tts_thread,
            args=(txt_path, out_dir, self.lang.get(), self.speed.get()),
            daemon=True,
        ).start()

    # ==============================
    # üß† Lu·ªìng t·∫°o audio
    # ==============================
    def _tts_thread(self, txt_path, out_dir, lang, speed):
        try:
            self.status.set("‚è≥ ƒêang x·ª≠ l√Ω file...")
            self.log_box.delete("1.0", "end")

            with open(txt_path, "r", encoding="utf-8") as f:
                content = f.read()

            # t√°ch n·ªôi dung t·ª´ng slide
            slides = re.split(r"(?i)Slide\s+(\d+)\s*:", content)
            # slides s·∫Ω c√≥ d·∫°ng: ['', '1', 'N·ªôi dung 1', '2', 'N·ªôi dung 2', ...]

            slide_data = []
            for i in range(1, len(slides), 2):
                num = slides[i]
                text = slides[i + 1].strip()
                if text:
                    slide_data.append((num, text))

            if not slide_data:
                self.log("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng 'Slide n:' trong file.")
                self.status.set("‚ùå Kh√¥ng c√≥ slide h·ª£p l·ªá.")
                return

            self.log(f"üìÑ Ph√°t hi·ªán {len(slide_data)} slides.")
            for num, text in slide_data:
                out_path = os.path.join(out_dir, f"audio_{num}.mp3")
                self.log(f"üéôÔ∏è ƒêang t·∫°o audio_{num}.mp3 ...")
                try:
                    tts = gTTS(text=text, lang=lang, slow=(speed < 1.0))
                    temp_path = out_path.replace(".mp3", "_temp.mp3")
                    tts.save(temp_path)

                    # N·∫øu t·ªëc ƒë·ªô kh√°c 1.0 ‚Üí ch·ªânh t·ªëc ƒë·ªô qua ffmpeg
                    if abs(speed - 1.0) > 0.01:
                        os.system(
                            f'ffmpeg -y -i "{temp_path}" -filter:a "atempo={speed}" "{out_path}"'
                        )
                        os.remove(temp_path)
                    else:
                        os.rename(temp_path, out_path)
                except Exception as e:
                    self.log(f"‚ùå L·ªói slide {num}: {e}")
                    continue

            self.status.set("‚úÖ Ho√†n t·∫•t t·∫°o audio.")
            self.log(f"‚úÖ Ho√†n t·∫•t! ƒê√£ l∆∞u {len(slide_data)} file trong: {out_dir}")
            messagebox.showinfo(
                "Th√†nh c√¥ng", f"ƒê√£ t·∫°o {len(slide_data)} file audio t·∫°i:\n{out_dir}"
            )

        except Exception as e:
            self.status.set("‚ùå L·ªói khi x·ª≠ l√Ω.")
            self.log(f"‚ùå L·ªói: {e}")

    # ==============================
    # üìú Ghi log ra UI
    # ==============================
    def log(self, text):
        self.log_box.insert("end", text + "\n")
        self.log_box.see("end")
