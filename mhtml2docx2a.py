import email
import base64
import os
import pypandoc
from bs4 import BeautifulSoup
import uuid
import shutil

def convert_mhtml_to_docx_final(mhtml_file_path, docx_file_path):
    """
    Chuy·ªÉn ƒë·ªïi file MHTML l·ªõn sang DOCX, s·ª≠ d·ª•ng logic t√¨m ki·∫øm ph·∫ßn HTML
    l·ªõn nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c.
    """
    print(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {mhtml_file_path}")
    
    temp_resource_dir = "temp_resources_" + str(uuid.uuid4())
    os.makedirs(temp_resource_dir, exist_ok=True)

    try:
        with open(mhtml_file_path, 'rb') as f:
            msg = email.message_from_bytes(f.read())
    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng khi ƒë·ªçc file MHTML: {e}")
        shutil.rmtree(temp_resource_dir)
        return

    html_parts_candidates = []
    resources = {}

    for part in msg.walk():
        content_type = part.get_content_type()
        content_disposition = str(part.get("Content-Disposition"))

        # 1. Thu th·∫≠p t·∫•t c·∫£ c√°c ph·∫ßn HTML ti·ªÅm nƒÉng v√†o m·ªôt danh s√°ch
        if content_type and content_type.startswith('text/html') and 'attachment' not in content_disposition:
            html_parts_candidates.append(part)
        
        if part.get('Content-ID'):
            cid = part.get('Content-ID').strip('<>')
            resources[cid] = part

    # 2. Ch·ªçn ph·∫ßn HTML l·ªõn nh·∫•t t·ª´ danh s√°ch ·ª©ng c·ª≠ vi√™n
    html_part = None
    if html_parts_candidates:
        # D√πng h√†m max v·ªõi key l√† ƒë·ªô d√†i c·ªßa payload ƒë·ªÉ t√¨m ph·∫ßn l·ªõn nh·∫•t
        html_part = max(html_parts_candidates, key=lambda p: len(p.get_payload(decode=True)))
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(html_parts_candidates)} ph·∫ßn HTML. ƒê√£ ch·ªçn ph·∫ßn l·ªõn nh·∫•t (k√≠ch th∆∞·ªõc: {len(html_part.get_payload(decode=True))} bytes).")
    
    if not html_part:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ ph·∫ßn HTML h·ª£p l·ªá n√†o trong file MHTML.")
        shutil.rmtree(temp_resource_dir)
        return

    charset = html_part.get_content_charset() or 'utf-8'
    html_content = html_part.get_payload(decode=True).decode(charset, 'replace')
    soup = BeautifulSoup(html_content, 'lxml')

    for img_tag in soup.find_all('img'):
        src = img_tag.get('src')
        if src and src.startswith('cid:'):
            cid_key = src[4:]
            if cid_key in resources:
                resource_part = resources[cid_key]
                filename = resource_part.get_filename() or f"{cid_key.split('@')[0]}.png"
                filepath = os.path.join(temp_resource_dir, filename)
                
                with open(filepath, 'wb') as f:
                    f.write(resource_part.get_payload(decode=True))
                
                img_tag['src'] = filepath

    temp_html_path = 'temp_main_final.html'
    with open(temp_html_path, 'w', encoding='utf-8') as f:
        f.write(str(soup))
    
    print("ƒêang g·ªçi Pandoc ƒë·ªÉ chuy·ªÉn ƒë·ªïi...")
    
    try:
        pypandoc.convert_file(
            temp_html_path,
            'docx',
            outputfile=docx_file_path,
            extra_args=['--standalone']
        )
        print(f"üèÜ Th√†nh c√¥ng! File DOCX ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {docx_file_path}")
    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh chuy·ªÉn ƒë·ªïi b·∫±ng Pandoc: {e}")

    finally:
        # D·ªçn d·∫πp c√°c file t·∫°m sau khi ho√†n t·∫•t
        print("ƒêang d·ªçn d·∫πp c√°c file t·∫°m...")
        if os.path.exists(temp_html_path):
            os.remove(temp_html_path)
        if os.path.exists(temp_resource_dir):
            shutil.rmtree(temp_resource_dir)
        print("D·ªçn d·∫πp ho√†n t·∫•t.")

if __name__ == '__main__':
    input_mhtml_file = 'gptb2.mhtml' 
    output_docx_file = 'gptb2_docx.docx'   

    if not os.path.exists(input_mhtml_file):
        print(f"L·ªói: File '{input_mhtml_file}' kh√¥ng t·ªìn t·∫°i.")
    else:
        convert_mhtml_to_docx_final(input_mhtml_file, output_docx_file)