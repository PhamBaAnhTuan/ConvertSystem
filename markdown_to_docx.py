import os
import threading
import customtkinter as ctk
from tkinter import filedialog, messagebox
import pypandoc


class MarkdownToDocxConverter(ctk.CTkFrame):
    def __init__(self, master=None):
        super().__init__(master)
        self.pack(fill="both", expand=True, padx=20, pady=20)

        # Bi·∫øn l∆∞u ƒë∆∞·ªùng d·∫´n
        self.md_input = ctk.StringVar()
        self.docx_output = ctk.StringVar()
        # self.log = ctk.StringVar(value="Ch∆∞a ch·ªçn file...")

        # --- Giao di·ªán ---
        title = ctk.CTkLabel(
            self, text="üìÑ Markdown ‚Üí DOCX", font=("Arial", 20, "bold")
        )
        title.pack(pady=10)

        # --- Ch·ªçn file Markdown ---
        md_file_frame = ctk.CTkFrame(self)
        md_file_frame.pack(fill="x", pady=10)
        ctk.CTkLabel(md_file_frame, text="File Markdown:").pack(side="left", padx=10)
        ctk.CTkEntry(
            md_file_frame,
            textvariable=self.md_input,
            # width=600,
            placeholder_text="Ch·ªçn file .md...",
            placeholder_text_color="#888",
        ).pack(side="left", padx=5, fill="x", expand=True)
        self.input_btn = ctk.CTkButton(
            md_file_frame, text="üìÇ Ch·ªçn File", command=self.select_md_file
        )
        self.input_btn.pack(side="right", padx=10)

        # --- File DOCX Output ---
        docx_file_frame = ctk.CTkFrame(self)
        docx_file_frame.pack(fill="x", pady=10)
        ctk.CTkLabel(docx_file_frame, text="File Docx:").pack(side="left", padx=10)
        ctk.CTkEntry(
            docx_file_frame,
            textvariable=self.docx_output,
            # width=600,
            placeholder_text="ƒê∆∞·ªùng d·∫´n file .docx xu·∫•t ra...",
            placeholder_text_color="#888",
        ).pack(side="left", padx=5, fill="x", expand=True)
        self.output_btn = ctk.CTkButton(
            docx_file_frame, text="üíæ Ch·ªçn th∆∞ m·ª•c", command=self.select_docx_file
        )
        self.output_btn.pack(side="right", padx=10)

        # --- Log box ---
        self.log_box = ctk.CTkTextbox(self, height=100)
        self.log_box.pack(fill="both", pady=10)

        # --- N√∫t ch·∫°y ---
        self.convert_btn = ctk.CTkButton(
            self, text="‚ñ∂Ô∏è Chuy·ªÉn ƒê·ªïi", command=self.run_convert
        )
        self.convert_btn.pack(pady=10)

    # --- H√†m ch·ªçn file ---
    def select_md_file(self):
        path = filedialog.askopenfilename(filetypes=[("Markdown Files", "*.md")])
        if path:
            self.md_input.set(path)
            suggested_docx = path.replace(".md", ".docx")
            self.docx_output.set(suggested_docx)
            self.log(
                "‚úÖ ƒê√£ ch·ªçn file Markdown. \n‚úÖ ƒê∆∞·ªùng d·∫´n DOCX t∆∞∆°ng t·ª± ƒë√£ t·ª± ƒë·ªông ƒëi·ªÅn."
            )

    def select_docx_file(self):
        path = filedialog.askdirectory()
        if path:
            self.docx_output.set(path)
            self.log("‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c l∆∞u file docx")

    def disable_buttons(self, state=True):
        state_val = "disabled" if state else "normal"
        for widget in [self.input_btn, self.output_btn, self.convert_btn]:
            widget.configure(state=state_val)

    # --- H√†m x·ª≠ l√Ω ch√≠nh ---
    def run_convert(self):
        md_path = self.md_input.get()
        docx_path = self.docx_output.get()

        if not md_path or not os.path.exists(md_path):
            self.log("‚ùå File Markdown kh√¥ng t·ªìn t·∫°i.")
            return
        if not docx_path:
            self.log("‚ùå Ch∆∞a ch·ªçn n∆°i l∆∞u DOCX.")
            return

        self.log("‚è≥ ƒêang chuy·ªÉn ƒë·ªïi...")
        threading.Thread(target=self._convert_thread, args=(md_path, docx_path)).start()

    def _convert_thread(self, md_path, docx_path):
        try:
            self.log("‚è≥ ƒêang x·ª≠ l√Ω file...")
            self.log_box.delete("1.0", "end")
            pypandoc.convert_file(md_path, "docx", outputfile=docx_path)
            self.log(f"‚úÖ ƒê√£ l∆∞u file DOCX t·∫°i: {docx_path}")
            # messagebox.showinfo("Ho√†n t·∫•t", f"ƒê√£ t·∫°o file DOCX:\n{docx_path}")
        except Exception as e:
            self.log(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi: {e}")

    def log(self, text):
        self.log_box.insert("end", text + "\n")
        self.log_box.see("end")
