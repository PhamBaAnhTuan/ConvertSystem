import os
import re
import asyncio
import edge_tts

# --- C·∫§U H√åNH ---
# !!! QUAN TR·ªåNG: H√£y thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n n√†y ƒë·∫øn ƒë√∫ng file script c·ªßa b·∫°n !!!
INPUT_FILE = r'D:\DongAUniversity\T√ÄI LI·ªÜU D·∫†Y H·ªåC_2024-2025\K·ªπ thu·∫≠t l·∫≠p tr√¨nh\C√°c bu·ªïi h·ªçc\CH∆Ø∆†NG 3 - KI·ªÇU D·ªÆ LI·ªÜU, BI·∫æN V√Ä M·∫¢NG\Script Ch∆∞∆°ng 3-H∆∞·ªõng d·∫´n l·∫≠p tr√¨nh Java c∆° b·∫£n.txt' 

# Th∆∞ m·ª•c output ƒë·ªÉ ch·ª©a file audio
parent_directory = os.path.dirname(INPUT_FILE)
OUTPUT_FOLDER = os.path.join(parent_directory, "audio_chat_luong_cao") # L∆∞u v√†o th∆∞ m·ª•c m·ªõi

# === [C·∫¨P NH·∫¨T] C√°c th√¥ng s·ªë √¢m thanh m·ªõi cho ch·∫•t l∆∞·ª£ng cao h∆°n ===
VOICE = 'vi-VN-HoaiMyNeural' 
RATE = "+5%"      # T·ªëc ƒë·ªô n√≥i nhanh h∆°n
PITCH = "+10Hz"     # Cao ƒë·ªô gi·ªçng cao h∆°n, trong h∆°n
VOLUME = "+100%"    # √Çm l∆∞·ª£ng t·ªëi ƒëa
# =================================================================

MAX_RETRIES = 3 # S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa

# --- B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ---

async def main():
    """
    H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán vi·ªác chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh √¢m thanh.
    """
    print(f"‚ñ∂Ô∏è  B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o audio ch·∫•t l∆∞·ª£ng cao...")
    
    if not os.path.exists(OUTPUT_FOLDER):
        os.makedirs(OUTPUT_FOLDER)
        print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c m·ªõi t·∫°i: {OUTPUT_FOLDER}")

    print(f"üó£Ô∏è  Gi·ªçng ƒë·ªçc: {VOICE} | T·ªëc ƒë·ªô: {RATE} | Cao ƒë·ªô: {PITCH} | √Çm l∆∞·ª£ng: {VOLUME}")
    print(f"üìÅ C√°c file audio s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i: {OUTPUT_FOLDER}")
    print("-" * 40)

    try:
        with open(INPUT_FILE, 'r', encoding='utf-8') as f:
            content = f.read()

        #slides_content = re.split(r'\n[-‚Äì‚Äî]+\s*SLIDE\s*\d+\s*[-‚Äì‚Äî]+\n', content)
        slides_content = re.split(r'(?=Slide \d+:)', content)
        valid_slides = [chunk for chunk in slides_content if chunk.strip()]
        
        print(f"üîç ƒê√£ t√¨m th·∫•y {len(valid_slides)} slide c√≥ n·ªôi dung trong file script.")
        print("-" * 40)

        processed_count = 0
        failed_slides = []

        for i, text_chunk in enumerate(valid_slides):
            slide_number = i + 1
            script_to_read = text_chunk.strip()
            
            print(f"‚ñ∂Ô∏è  ƒêang x·ª≠ l√Ω Slide {slide_number}...")
            
            output_filename = os.path.join(OUTPUT_FOLDER, f'slide_{slide_number}.mp3')
            
            success = False
            for attempt in range(MAX_RETRIES):
                try:
                    # [C·∫¨P NH·∫¨T] Th√™m c√°c tham s·ªë pitch v√† volume v√†o ƒë√¢y
                    communicate = edge_tts.Communicate(
                        script_to_read, 
                        VOICE, 
                        rate=RATE, 
                        pitch=PITCH, 
                        volume=VOLUME
                    )
                    await communicate.save(output_filename)
                    print(f"  ‚úÖ Th√†nh c√¥ng sau {attempt + 1} l·∫ßn th·ª≠.")
                    success = True
                    processed_count += 1
                    break
                except Exception as e:
                    print(f"  ‚ö†Ô∏è L·∫ßn th·ª≠ {attempt + 1}/{MAX_RETRIES} th·∫•t b·∫°i.")
                    if attempt < MAX_RETRIES - 1:
                        await asyncio.sleep(2)
            
            if not success:
                failed_slides.append(slide_number)

        print("-" * 40)
        print(f"üéâ Ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω v√† t·∫°o ra th√†nh c√¥ng {processed_count} file audio.")
        if failed_slides:
            print(f"‚ö†Ô∏è C√°c slide sau ƒë√£ b·ªã l·ªói: {failed_slides}")

    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{INPUT_FILE}'.")
    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())