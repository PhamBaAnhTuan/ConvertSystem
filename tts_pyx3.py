import os
import threading
import pyttsx3
import customtkinter as ctk
from tkinter import filedialog, messagebox


class TextToSpeechPyx3(ctk.CTkFrame):
    def __init__(self, master=None):
        super().__init__(master)
        self.pack(fill="both", expand=True, padx=20, pady=20)

        # --- Bi·∫øn ---
        self.text_input = ctk.StringVar()
        self.txt_file = ctk.StringVar()
        self.output_path = ctk.StringVar()
        self.selected_voice = ctk.StringVar(value="M·∫∑c ƒë·ªãnh")
        self.speed = ctk.DoubleVar(value=1.0)
        self.language = ctk.StringVar(value="vi")
        self.status = ctk.StringVar(value="Ch∆∞a c√≥ t√°c v·ª•...")

        # --- Ti√™u ƒë·ªÅ ---
        ctk.CTkLabel(
            self, text="üó£Ô∏è Text ‚Üí Speech (Pyx3)", font=("Arial", 20, "bold")
        ).pack(pady=10)

        # --- V√πng nh·∫≠p vƒÉn b·∫£n ---
        self.textbox = ctk.CTkTextbox(self, width=600, height=150)
        self.textbox.pack(pady=10)
        self.textbox.insert("1.0", "Nh·∫≠p n·ªôi dung ho·∫∑c ch·ªçn file .txt...")

        # --- N√∫t ch·ªçn file .txt ---
        file_frame = ctk.CTkFrame(self)
        file_frame.pack(pady=5, fill="x")
        ctk.CTkEntry(
            file_frame,
            textvariable=self.txt_file,
            placeholder_text="Ch·ªçn file .txt...",
            width=400,
        ).pack(side="left", padx=10, pady=5, expand=True, fill="x")
        ctk.CTkButton(
            file_frame, text="üìÇ Ch·ªçn File", command=self.select_txt_file
        ).pack(side="right", padx=10)

        # --- L·ª±a ch·ªçn gi·ªçng ƒë·ªçc ---
        voice_frame = ctk.CTkFrame(self)
        voice_frame.pack(pady=5)
        ctk.CTkLabel(voice_frame, text="üé§ Ch·ªçn gi·ªçng ƒë·ªçc:").grid(
            row=0, column=0, padx=10
        )
        self.voice_option = ctk.CTkOptionMenu(
            voice_frame, variable=self.selected_voice, values=["M·∫∑c ƒë·ªãnh", "Nam", "N·ªØ"]
        )
        self.voice_option.grid(row=0, column=1, padx=10)

        # --- Thanh tr∆∞·ª£t t·ªëc ƒë·ªô ---
        speed_frame = ctk.CTkFrame(self)
        speed_frame.pack(pady=10)
        ctk.CTkLabel(speed_frame, text="üéöÔ∏è T·ªëc ƒë·ªô n√≥i:").grid(row=0, column=0, padx=10)
        self.speed_slider = ctk.CTkSlider(
            speed_frame, from_=0.5, to=2.0, number_of_steps=15, variable=self.speed
        )
        self.speed_slider.grid(row=0, column=1, padx=10)
        self.speed_label = ctk.CTkLabel(speed_frame, text="1.0x")
        self.speed_label.grid(row=0, column=2)
        self.speed_slider.configure(
            command=lambda v: self.speed_label.configure(text=f"{float(v):.1f}x")
        )

        # --- Ch·ªçn n∆°i l∆∞u file ---
        ctk.CTkEntry(
            self,
            textvariable=self.output_path,
            width=400,
            placeholder_text="T√™n file MP3 xu·∫•t ra...",
        ).pack(pady=5)
        ctk.CTkButton(
            self, text="üíæ Ch·ªçn n∆°i l∆∞u file", command=self.select_output
        ).pack(pady=5)

        # --- N√∫t ch·∫°y ---
        ctk.CTkButton(self, text="‚ñ∂Ô∏è Chuy·ªÉn ƒê·ªïi", command=self.run_tts).pack(pady=10)

        # --- Tr·∫°ng th√°i ---
        ctk.CTkLabel(self, textvariable=self.status, text_color="gray").pack(pady=5)

    def select_txt_file(self):
        path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if path:
            self.txt_file.set(path)
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
                self.textbox.delete("1.0", "end")
                self.textbox.insert("1.0", content)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

    def select_output(self):
        dir_path = filedialog.askdirectory()
        if not dir_path:
            return
        self.output_path.set(os.path.join(dir_path, "speech.mp3"))

    def run_tts(self):
        text = self.textbox.get("1.0", "end").strip()
        lang = self.language.get().strip()
        out_path = self.output_path.get().strip()
        voice_choice = self.selected_voice.get()
        rate = int(self.speed.get() * 150)  # t·ªëc ƒë·ªô n√≥i chu·∫©n kho·∫£ng 150 wpm

        if not text:
            messagebox.showwarning(
                "Thi·∫øu n·ªôi dung", "Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn file .txt."
            )
            return
        if not out_path:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn n∆°i l∆∞u file.")
            return

        self.status.set("‚è≥ ƒêang t·∫°o gi·ªçng n√≥i...")
        threading.Thread(
            target=self._tts_thread, args=(text, out_path, lang, rate, voice_choice)
        ).start()

    def _tts_thread(self, text, out_path, lang, rate, voice_choice):
        try:
            engine = pyttsx3.init()
            voices = engine.getProperty("voices")
            print("voices: ", voices)

            # Ch·ªçn gi·ªçng ƒë·ªçc
            if voice_choice == "Nam":
                for v in voices:
                    if "male" in v.name.lower():
                        engine.setProperty("voice", v.id)
                        break
            elif voice_choice == "N·ªØ":
                for v in voices:
                    if "female" in v.name.lower():
                        engine.setProperty("voice", v.id)
                        break

            engine.setProperty("rate", rate)
            engine.save_to_file(text, out_path)
            engine.runAndWait()

            self.status.set(f"‚úÖ ƒê√£ l∆∞u file gi·ªçng n√≥i: {out_path}")
            messagebox.showinfo("Ho√†n t·∫•t", f"üéß File MP3 ƒë√£ ƒë∆∞·ª£c t·∫°o:\n{out_path}")
        except Exception as e:
            self.status.set(f"‚ùå L·ªói: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o TTS:\n{e}")
